// Generated by CoffeeScript 1.7.1
(function() {
  var DiscussionFetcher, async, childProcess, _;

  childProcess = require("child_process");

  async = require("async");

  _ = require("underscore");

  DiscussionFetcher = (function() {
    function DiscussionFetcher(opts) {
      this.apiKey = opts.apiKey || process.env.TENDER_SITENAME || null;
      this.site = opts.site || process.env.TENDER_APIKEY || null;
      this.state = opts.state || "pending";
      this.url = this._buildUrl();
      this.numPages = 0;
      this.err = null;
      this.discussions = [];
    }

    DiscussionFetcher.prototype._buildUrl = function() {
      var url;
      url = "http://api.tenderapp.com/" + this.site + "/discussions/" + this.state;
      url += "?auth=" + this.apiKey;
      return url;
    };

    DiscussionFetcher.prototype._validates = function() {
      if (!this.apiKey) {
        return new Error("You need to set an API key.");
      }
      if (!this.site) {
        return new Error("You need to set a Tender site name.");
      }
    };

    DiscussionFetcher.prototype.fetch = function(cb) {
      var err;
      err = this._validates();
      if (err) {
        return cb(err);
      }
      return this._fetchPage(1, (function(_this) {
        return function() {
          var num, q, _i, _ref, _results;
          if (_this.pageCount < 2) {
            return _this._end(cb);
          }
          q = async.queue(_this._fetchPage, 5);
          q.drain = function() {
            return this._end(cb);
          };
          _results = [];
          for (num = _i = 2, _ref = _this.pageCount; 2 <= _ref ? _i <= _ref : _i >= _ref; num = 2 <= _ref ? ++_i : --_i) {
            _results.push(q.push(num));
          }
          return _results;
        };
      })(this));
    };

    DiscussionFetcher.prototype._end = function(cb) {
      this.discussions = _.unique(this.discussions);
      return cb(this.err, this.discussions);
    };

    DiscussionFetcher.prototype._fetchPage = function(page, cb) {
      var cmd, url;
      if (this.err) {
        return cb();
      }
      url = this.url + "&page=" + page + "&sort=created";
      cmd = "curl -H \"Accept: application/vnd.tender-v1+json\" " + url;
      return childProcess.exec(cmd, (function(_this) {
        return function(err, stdout, stderr) {
          var discussion, e, entry, num, parsed, _i, _ref;
          if (err) {
            _this.err = err;
            return cb(err);
          }
          parsed = null;
          try {
            parsed = JSON.parse(stdout);
          } catch (_error) {
            e = _error;
            _this.err = e;
            return cb();
          }
          for (num = _i = 0, _ref = parsed.discussions.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; num = 0 <= _ref ? ++_i : --_i) {
            discussion = parsed.discussions[num];
            entry = {
              title: discussion.title,
              href: discussion.html_href
            };
            _this.discussions.push(entry);
          }
          if (page === 1) {
            _this.pageCount = Math.ceil(parsed.total / parsed.per_page);
          }
          return cb();
        };
      })(this));
    };

    return DiscussionFetcher;

  })();

  module.exports = DiscussionFetcher;

}).call(this);
